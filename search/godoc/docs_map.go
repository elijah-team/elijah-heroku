// Code generated by github.com/gobuffalo/mapgen. DO NOT EDIT.

package godoc

import (
	"encoding/json"
	"fmt"
	"sort"
	"sync"
)

var docsMapOnce sync.Once

// docsMap wraps sync.Map and uses the following types:
// key:   string
// value: *Doc
type docsMap struct {
	data *sync.Map
	init sync.Once
}

func (m *docsMap) Data() *sync.Map {
	docsMapOnce.Do(func() {
		if m.data == nil {
			m.data = &sync.Map{}
		}
	})
	return m.data
}

func (m *docsMap) MarshalJSON() ([]byte, error) {
	mm := map[string]interface{}{}
	m.Data().Range(func(key, value interface{}) bool {
		mm[fmt.Sprintf("%s", key)] = value
		return true
	})
	return json.Marshal(mm)
}

func (m *docsMap) UnmarshalJSON(b []byte) error {
	mm := map[string]*Doc{}

	if err := json.Unmarshal(b, &mm); err != nil {
		return err
	}
	for k, v := range mm {
		m.Store(k, v)
	}
	return nil
}

// Delete the key from the map
func (m *docsMap) Delete(key string) {
	m.Data().Delete(key)
}

// Load the key from the map.
// Returns *Doc or bool.
// A false return indicates either the key was not found
// or the value is not of type *Doc
func (m *docsMap) Load(key string) (*Doc, bool) {
	i, ok := m.Data().Load(key)
	if !ok {
		return nil, false
	}
	s, ok := i.(*Doc)
	return s, ok
}

// LoadOrStore will return an existing key or
// store the value if not already in the map
func (m *docsMap) LoadOrStore(key string, value *Doc) (*Doc, bool) {
	i, _ := m.Data().LoadOrStore(key, value)
	s, ok := i.(*Doc)
	return s, ok
}

// LoadOr will return an existing key or
// run the function and store the results
func (m *docsMap) LoadOr(key string, fn func(*docsMap) (*Doc, bool)) (*Doc, bool) {
	i, ok := m.Load(key)
	if ok {
		return i, ok
	}
	i, ok = fn(m)
	if ok {
		m.Store(key, i)
		return i, ok
	}
	return i, false
}

// Range over the *Doc values in the map
func (m *docsMap) Range(f func(key string, value *Doc) bool) {
	m.Data().Range(func(k, v interface{}) bool {
		key, ok := k.(string)
		if !ok {
			return false
		}
		value, ok := v.(*Doc)
		if !ok {
			return false
		}
		return f(key, value)
	})
}

// Store a *Doc in the map
func (m *docsMap) Store(key string, value *Doc) {
	m.Data().Store(key, value)
}

// Keys returns a list of keys in the map
func (m *docsMap) Keys() []string {
	var keys []string
	m.Range(func(key string, value *Doc) bool {
		keys = append(keys, key)
		return true
	})
	sort.Strings(keys)
	return keys
}
